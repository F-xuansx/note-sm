1.什么是前端？
2.什么是闭包？
$闭包
百度百科：闭包就是能够读取其他函数内部变量的函数。
这个能够读取某函数内部变量的函数，必定就是某函数的内部函数，或者代理某函数内部函数的函数。
百度百科又说，在本质上，闭包是将函数内部和函数外部连接起来的桥梁。
怎样理解只有内部的函数可以读取函数的变量？
全局就相当于一个大广场，
每当有一个函数在大广场建立，就相当于在大广场“自立门户”，盖了一座房子；
如果在这个房子里又有房子建立，就相当于在这个房子中又“自立门户”；
以此类推。
同时呢，住在一个房子内的人，肯定有这把房子的钥匙，
如果这个人不断的在房子里建房子，也就是函数嵌套，
那这个人一定有各个房子的钥匙，也就是它可以一层一层访问外边，
除了这个房子的人，外边的人并不能访问他的房子。

每当有一个函数建立，就好像又雇佣了一个人。

闭包Vs对象：
函数是临时雇佣，干完活就辞退。
对象和变量更像是长期工。
闭包：函数内部的函数可以访问函数内部的变量，将函数内部的函数赋值给函数外部的变量，然后调用这个变量；
 vs
对象：对象内部的方法可以访问对象内部的变量，调用这个对象的方法。
前者像是，心血来潮看到一个干活的的团队挺适合，就把它顾永成长期工了。
后者更像是，本来就是长期工，自己培养的一个小团队（那前者就是认领、领养的）。
用“心血来潮”来形容，是因为相比于创建了一个对象然后调用对象的方法（有预谋要用哪些变量，做什么事情），
将一个函数内部的函数保留下来显得更没有预谋（关注点在其实现的功能上，所以它引用着哪些变量根本就不知道）。
自己培养一只团队，肯定对其规模是比较了解的。
而心血来潮雇佣了一只团队，却发现它是属于一个更大的团队下的一个小团队，那就需要把整个大团队买下来。一不小心就养不起了。
如果返回的函数内部的函数没有引用外部函数的任何变量会如何？


function(){}中的()中的东西是雇佣function的记忆，大部分()里没有东西就是说大部分是没有记忆的。
（）里面是var的东西？

函数是干完就走的，对象是被留下来的。

一般情况下，函数是干完就走的，这就是执行环境的生命周期在函数执行完之后销毁。
但是一旦将函数赋值给变量，那么就相当于把它留下来了。
3.什么是继承？
4.什么是原型链？
原型链是这个过程中物质共享。

new Foo()的时候就相当于加入Foo派，然后他就能得到一把Foo提供的通往其prototype钥匙，然后就可以去Foo的prototype里面拿东西了。

new Bar() instanceof Bar的意思就是“new Bar()能访问到Bar提供的仓库吗？”
5.什么是内存泄漏？
6.什么是this?
this就是“你”的意思。
函数执行的this指的是window，就好比“君”代指的皇帝一样。
构造函数的this指向是新创建的对象，就好像招人的人给被招的人开会，说你一样。
你的什么是什么，你碰到什么问题的时候怎么办。

this就是君，就是老大的意思。
只要不是xxx.xxx()的形式，那么一个函数的运行时的老大都是window。
而xxx.xxx()的形式，就是说现在xxx是老大，然后来运行什么。
